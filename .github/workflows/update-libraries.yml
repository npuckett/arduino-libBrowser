name: Update Arduino Libraries (Daily)

on:
  schedule:
    # Run every day at 2 AM EST (7 AM UTC)
    - cron: '0 7 * * *'
  workflow_dispatch: # Allow manual runs

jobs:
  incremental-update:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Prevent runaway processes
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # Use our token for git operations
        
      - name: Setup PowerShell
        shell: pwsh
        run: |
          Write-Host "PowerShell ready for incremental Arduino library updates"
          
      - name: Run incremental library update
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # Use our custom token name
        run: |
          # Enhanced incremental approach: check for repos created or updated in last 2 days
          $twoDaysAgo = (Get-Date).AddDays(-2).ToString("yyyy-MM-dd")
          Write-Host "Checking for Arduino libraries updated since: $twoDaysAgo"
          
          # Enhanced rate limiting and error handling
          $rateLimitDelay = 1  # seconds between requests
          $maxRetries = 3
          
          # Load existing libraries
          if (Test-Path "output/libraries.json") {
            $existingData = Get-Content "output/libraries.json" | ConvertFrom-Json
            $existingLibraries = $existingData.libraries
            $existingRepoNames = @{}
            $existingLibraries | ForEach-Object { $existingRepoNames[$_.repository_name] = $_ }
            Write-Host "Found $($existingLibraries.Count) existing libraries"
          } else {
            $existingLibraries = @()
            $existingRepoNames = @{}
            Write-Host "No existing libraries found, will do full discovery"
          }
          
          # GitHub API headers with authentication
          $headers = @{
            'User-Agent' = 'Arduino-Library-Browser-Daily'
            'Accept' = 'application/vnd.github.v3+json'
            'Authorization' = "token $env:GITHUB_TOKEN"
          }
          
          # Multiple search strategies for comprehensive coverage
          $searchQueries = @(
            # Primary: Recently updated libraries
            "arduino library pushed:>$twoDaysAgo",
            # Secondary: Libraries with arduino in name, recently updated
            "arduino in:name pushed:>$twoDaysAgo",
            # Tertiary: Recently created Arduino projects
            "arduino library created:>$twoDaysAgo",
            # Quaternary: Arduino libraries with recent activity (broader timeframe)
            "arduino library pushed:>$((Get-Date).AddDays(-7).ToString('yyyy-MM-dd'))"
          )
          
          Write-Host "Using $($searchQueries.Count) search strategies for comprehensive coverage"
          
          $allFoundRepos = @{}  # Use hashtable to avoid duplicates
          $newLibraries = @()
          $updatedLibraries = @()
          $processedCount = 0
          $maxPagesPerQuery = 10  # Limit per query to stay within API limits
          
          foreach ($searchQuery in $searchQueries) {
            Write-Host "`nSearching with query: '$searchQuery'"
            $page = 1
            
            do {
              $searchUrl = "https://api.github.com/search/repositories?q=$([System.Web.HttpUtility]::UrlEncode($searchQuery))&sort=updated&order=desc&page=$page&per_page=100"
              
              $retryCount = 0
              $response = $null
              
              # Retry logic for API calls
              do {
                try {
                  Start-Sleep -Seconds $rateLimitDelay
                  $response = Invoke-RestMethod -Uri $searchUrl -Headers $headers -ErrorAction Stop
                  Write-Host "  Query '$searchQuery' Page $page returned $($response.items.Count) repositories"
                  break
                } catch {
                  $retryCount++
                  $waitTime = [math]::Pow(2, $retryCount) * 5  # Exponential backoff
                  Write-Host "  Error on page $page (attempt $retryCount): $($_.Exception.Message). Waiting $waitTime seconds..."
                  
                  if ($retryCount -ge $maxRetries) {
                    Write-Host "  Max retries exceeded for page $page"
                    break
                  }
                  Start-Sleep -Seconds $waitTime
                }
              } while ($retryCount -lt $maxRetries)
              
              if (-not $response) {
                Write-Host "  Failed to get response for page $page, moving to next query"
                break
              }
              
              foreach ($repo in $response.items) {
                $repoName = "$($repo.owner.login)/$($repo.name)"
                
                # Skip if we've already processed this repo
                if ($allFoundRepos.ContainsKey($repoName)) {
                  continue
                }
                $allFoundRepos[$repoName] = $repo
                $processedCount++
              
                # Check if this is a new library or an update to existing
                $existingLibrary = $existingRepoNames[$repoName]
                $isNewLibrary = -not $existingLibrary
                $isUpdatedLibrary = $existingLibrary -and $repo.updated_at -ne $existingLibrary.github_updated_at
                
                if ($isNewLibrary) {
                  Write-Host "  New library found: $repoName"
                } elseif ($isUpdatedLibrary) {
                  Write-Host "  Existing library updated: $repoName (was: $($existingLibrary.github_updated_at), now: $($repo.updated_at))"
                } else {
                  Write-Host "  Library unchanged: $repoName"
                  continue  # Skip unchanged libraries
                }
                
                # Download and parse library.properties with retry logic
                $propertiesUrls = @(
                  "https://raw.githubusercontent.com/$repoName/master/library.properties",
                  "https://raw.githubusercontent.com/$repoName/main/library.properties"
                )
                
                $properties = $null
                foreach ($propertiesUrl in $propertiesUrls) {
                  $retryCount = 0
                  do {
                    try {
                      Start-Sleep -Milliseconds 500  # Rate limiting for raw content
                      $propertiesContent = Invoke-RestMethod -Uri $propertiesUrl -ErrorAction Stop
                      $properties = $propertiesContent
                      break
                    } catch {
                      $retryCount++
                      if ($retryCount -ge 2) { 
                        break  # Don't retry raw content as much
                      }
                      Start-Sleep -Seconds 2
                    }
                  } while ($retryCount -lt 2)
                  
                  if ($properties) { break }
                }
                
                if (-not $properties) {
                  Write-Host "  No library.properties found for $repoName"
                  continue
                }
                
                # Enhanced library info with GitHub metadata
                $libraryInfo = @{
                  repository_name = $repoName
                  repository_url = $repo.html_url
                  github_updated_at = $repo.updated_at
                  github_created_at = $repo.created_at
                  github_stars = $repo.stargazers_count
                  github_forks = $repo.forks_count
                  processed_at = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
                }
                
                # Parse properties file
                $properties -split "`n" | ForEach-Object {
                  $line = $_.Trim()
                  if ($line -and $line.Contains('=')) {
                    $key, $value = $line -split '=', 2
                    $libraryInfo[$key.Trim()] = $value.Trim()
                  }
                }
                
                # Add to appropriate list
                if ($isNewLibrary) {
                  $newLibraries += [PSCustomObject]$libraryInfo
                } else {
                  $updatedLibraries += [PSCustomObject]$libraryInfo
                }
              }
              
              $page++
            } while ($response.items.Count -eq 100 -and $page -le $maxPagesPerQuery)
          }
          
          Write-Host "Processing complete:"
          Write-Host "- Repositories checked: $processedCount"
          Write-Host "- New libraries: $($newLibraries.Count)"
          Write-Host "- Updated libraries: $($updatedLibraries.Count)"
          
          # Merge with existing libraries
          if ($existingLibraries.Count -gt 0) {
            # Remove old versions of updated libraries
            $updatedRepoNames = ($newLibraries + $updatedLibraries) | ForEach-Object { $_.repository_name }
            $keptLibraries = $existingLibraries | Where-Object { 
              $_.repository_name -notin $updatedRepoNames
            }
            $allLibraries = $keptLibraries + $newLibraries + $updatedLibraries
          } else {
            $allLibraries = $newLibraries + $updatedLibraries
          }
          
          # Create enhanced output structure
          $outputData = @{
            enhanced_at = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
            total_libraries = $allLibraries.Count
            changes_in_last_update = @{
              new_libraries = $newLibraries.Count
              updated_libraries = $updatedLibraries.Count
              total_changes = $newLibraries.Count + $updatedLibraries.Count
            }
            libraries = $allLibraries | Sort-Object name
          }
          
          # Save to file
          $outputData | ConvertTo-Json -Depth 10 | Set-Content "output/libraries.json" -Encoding UTF8
          
          Write-Host "Updated libraries.json with $($allLibraries.Count) total libraries"
          Write-Host "Changes: $($newLibraries.Count + $updatedLibraries.Count) new/updated libraries"
        
      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - Daily Update"
          
          # Debug: Check if token is available (first 4 characters only for security)
          if [ -n "${{ secrets.PERSONAL_ACCESS_TOKEN }}" ]; then
            echo "Token is available (length: ${#GITHUB_TOKEN})"
            echo "Token starts with: ${GITHUB_TOKEN:0:4}****"
          else
            echo "ERROR: PERSONAL_ACCESS_TOKEN secret is not set!"
            exit 1
          fi
          
          # Configure git to use the Personal Access Token for authentication
          git remote set-url origin https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git
          
          # Debug: Show current remote URL (without token)
          echo "Remote URL configured for repository: ${{ github.repository }}"
          
          git add output/libraries.json
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # Create meaningful commit message
            NEW_COUNT=$(grep -o '"new_libraries": [0-9]*' output/libraries.json | grep -o '[0-9]*' || echo "0")
            UPDATED_COUNT=$(grep -o '"updated_libraries": [0-9]*' output/libraries.json | grep -o '[0-9]*' || echo "0")
            TOTAL_COUNT=$(grep -o '"total_libraries": [0-9]*' output/libraries.json | grep -o '[0-9]*' || echo "0")
            
            git commit -m "Daily update: +${NEW_COUNT} new, ${UPDATED_COUNT} updated libraries (${TOTAL_COUNT} total) - $(date '+%Y-%m-%d %H:%M UTC')"
            git push
            echo "Libraries updated and pushed to repository"
          fi

      - name: Trigger GitHub Pages rebuild
        if: success()  # Only run if previous steps succeeded
        run: |
          echo "Library data updated successfully!"
          echo "GitHub Pages will automatically rebuild when changes are detected."
          echo "If GitHub Pages is set to deploy from branch 'main', it should update within a few minutes."
          
          # Optional: You can also trigger a manual Pages deployment via API
          # This requires the 'pages:write' permission on your Personal Access Token
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/pages/deployment \
            || echo "Manual Pages deployment trigger failed (this is optional)"
