name: Update Arduino Libraries (Daily)

on:
  schedule:
    # Run every day at 2 AM EST (7 AM UTC)
    - cron: '0 7 * * *'
  workflow_dispatch: # Allow manual runs

jobs:
  incremental-update:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Prevent runaway processes
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # Use our token for git operations
        
      - name: Setup PowerShell
        shell: pwsh
        run: |
          Write-Host "PowerShell ready for incremental Arduino library updates"
          
      - name: Run incremental library update
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # Use our custom token name
        run: |
          # Enhanced incremental approach: check for repos created or updated in last 2 days
          $twoDaysAgo = (Get-Date).AddDays(-2).ToString("yyyy-MM-dd")
          Write-Host "Checking for Arduino libraries updated since: $twoDaysAgo"
          
          # Enhanced rate limiting and error handling
          $rateLimitDelay = 1  # seconds between requests
          $maxRetries = 3
          
          # Load existing libraries
          if (Test-Path "output/libraries.json") {
            $existingData = Get-Content "output/libraries.json" | ConvertFrom-Json
            $existingLibraries = $existingData.libraries
            $existingRepoNames = @{}
            $existingLibraries | ForEach-Object { $existingRepoNames[$_.repository_name] = $_ }
            Write-Host "Found $($existingLibraries.Count) existing libraries"
          } else {
            $existingLibraries = @()
            $existingRepoNames = @{}
            Write-Host "No existing libraries found, will do full discovery"
          }
          
          # GitHub API headers with authentication
          $headers = @{
            'User-Agent' = 'Arduino-Library-Browser-Daily'
            'Accept' = 'application/vnd.github.v3+json'
            'Authorization' = "token $env:GITHUB_TOKEN"
          }
          
          # Search for recently updated Arduino libraries
          $page = 1
          $newLibraries = @()
          $updatedLibraries = @()
          $processedCount = 0
          $maxPages = 20  # Increased from 10 for better coverage
          
          do {
            $searchUrl = "https://api.github.com/search/repositories?q=arduino+library+pushed:>$twoDaysAgo&sort=updated&order=desc&page=$page&per_page=100"
            
            $retryCount = 0
            $response = $null
            
            # Retry logic for API calls
            do {
              try {
                Start-Sleep -Seconds $rateLimitDelay
                $response = Invoke-RestMethod -Uri $searchUrl -Headers $headers -ErrorAction Stop
                Write-Host "Page $page returned $($response.items.Count) repositories"
                break
              } catch {
                $retryCount++
                $waitTime = [math]::Pow(2, $retryCount) * 5  # Exponential backoff
                Write-Host "Error on page $page (attempt $retryCount): $($_.Exception.Message). Waiting $waitTime seconds..."
                
                if ($retryCount -ge $maxRetries) {
                  Write-Host "Max retries exceeded for page $page"
                  break
                }
                Start-Sleep -Seconds $waitTime
              }
            } while ($retryCount -lt $maxRetries)
            
            if (-not $response) {
              Write-Host "Failed to get response for page $page, stopping"
              break
            }
            
            foreach ($repo in $response.items) {
              $repoName = "$($repo.owner.login)/$($repo.name)"
              $processedCount++
              
              # Check if this is a new library or an update to existing
              $existingLibrary = $existingRepoNames[$repoName]
              $isNewLibrary = -not $existingLibrary
              $isUpdatedLibrary = $existingLibrary -and $repo.updated_at -ne $existingLibrary.github_updated_at
              
              if ($isNewLibrary) {
                Write-Host "New library found: $repoName"
              } elseif ($isUpdatedLibrary) {
                Write-Host "Existing library updated: $repoName (was: $($existingLibrary.github_updated_at), now: $($repo.updated_at))"
              } else {
                Write-Host "Library unchanged: $repoName"
                continue  # Skip unchanged libraries
              }
              
              # Download and parse library.properties with retry logic
              $propertiesUrls = @(
                "https://raw.githubusercontent.com/$repoName/master/library.properties",
                "https://raw.githubusercontent.com/$repoName/main/library.properties"
              )
              
              $properties = $null
              foreach ($propertiesUrl in $propertiesUrls) {
                $retryCount = 0
                do {
                  try {
                    Start-Sleep -Milliseconds 500  # Rate limiting for raw content
                    $propertiesContent = Invoke-RestMethod -Uri $propertiesUrl -ErrorAction Stop
                    $properties = $propertiesContent
                    break
                  } catch {
                    $retryCount++
                    if ($retryCount -ge 2) { 
                      break  # Don't retry raw content as much
                    }
                    Start-Sleep -Seconds 2
                  }
                } while ($retryCount -lt 2)
                
                if ($properties) { break }
              }
              
              if (-not $properties) {
                Write-Host "No library.properties found for $repoName"
                continue
              }
              
              # Enhanced library info with GitHub metadata
              $libraryInfo = @{
                repository_name = $repoName
                repository_url = $repo.html_url
                github_updated_at = $repo.updated_at
                github_created_at = $repo.created_at
                github_stars = $repo.stargazers_count
                github_forks = $repo.forks_count
                processed_at = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
              }
              
              # Parse properties file
              $properties -split "`n" | ForEach-Object {
                $line = $_.Trim()
                if ($line -and $line.Contains('=')) {
                  $key, $value = $line -split '=', 2
                  $libraryInfo[$key.Trim()] = $value.Trim()
                }
              }
              
              # Add to appropriate list
              if ($isNewLibrary) {
                $newLibraries += [PSCustomObject]$libraryInfo
              } else {
                $updatedLibraries += [PSCustomObject]$libraryInfo
              }
            }
            
            $page++
          } while ($response.items.Count -eq 100 -and $page -le $maxPages)
          
          Write-Host "Processing complete:"
          Write-Host "- Repositories checked: $processedCount"
          Write-Host "- New libraries: $($newLibraries.Count)"
          Write-Host "- Updated libraries: $($updatedLibraries.Count)"
          
          # Merge with existing libraries
          if ($existingLibraries.Count -gt 0) {
            # Remove old versions of updated libraries
            $updatedRepoNames = ($newLibraries + $updatedLibraries) | ForEach-Object { $_.repository_name }
            $keptLibraries = $existingLibraries | Where-Object { 
              $_.repository_name -notin $updatedRepoNames
            }
            $allLibraries = $keptLibraries + $newLibraries + $updatedLibraries
          } else {
            $allLibraries = $newLibraries + $updatedLibraries
          }
          
          # Create enhanced output structure
          $outputData = @{
            enhanced_at = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
            total_libraries = $allLibraries.Count
            changes_in_last_update = @{
              new_libraries = $newLibraries.Count
              updated_libraries = $updatedLibraries.Count
              total_changes = $newLibraries.Count + $updatedLibraries.Count
            }
            libraries = $allLibraries | Sort-Object name
          }
          
          # Save to file
          $outputData | ConvertTo-Json -Depth 10 | Set-Content "output/libraries.json" -Encoding UTF8
          
          Write-Host "Updated libraries.json with $($allLibraries.Count) total libraries"
          Write-Host "Changes: $($newLibraries.Count + $updatedLibraries.Count) new/updated libraries"
        
      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - Daily Update"
          
          # Configure git to use the Personal Access Token for authentication
          git remote set-url origin https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git
          
          git add output/libraries.json
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # Create meaningful commit message
            NEW_COUNT=$(grep -o '"new_libraries": [0-9]*' output/libraries.json | grep -o '[0-9]*' || echo "0")
            UPDATED_COUNT=$(grep -o '"updated_libraries": [0-9]*' output/libraries.json | grep -o '[0-9]*' || echo "0")
            TOTAL_COUNT=$(grep -o '"total_libraries": [0-9]*' output/libraries.json | grep -o '[0-9]*' || echo "0")
            
            git commit -m "Daily update: +${NEW_COUNT} new, ${UPDATED_COUNT} updated libraries (${TOTAL_COUNT} total) - $(date '+%Y-%m-%d %H:%M UTC')"
            git push
            echo "Libraries updated and pushed to repository"
          fi
